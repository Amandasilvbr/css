// Stack layout helper component

.Stack {
  
  // A Stack component lays elements horizontally or vertically on the page.
  //
  // Stack is a simple abstraction of CSS' Flexbox. Use it to structure elemets
  // that are visually grouped, following the same direction.
  //
  // Markup structure
  // =========
  //
  // .Stack
  // ├─ &.Stack--dir-[ inline | block ]-[ whenRegular | whenNarrow ]
  // ├─ &.Stack--gap-[ none | condensed | normal | spacious ]-[ whenRegular | whenNarrow ]
  // ├─ &.Stack--align-[ start | center | end | baseline ]-[ whenRegular | whenNarrow ]
  // ├─ &.Stack--alignWrap-[ start | center | end | distribute | distributeEvenly ]-[ whenRegular | whenNarrow ]
  // ├─ &.Stack--spread-[ start | center | end | distribute | distributeEvenly ]-[ whenRegular | whenNarrow ]
  // ├─ &.Stack--wrap-[ whenRegular | whenNarrow ]
  // ├─ &.Stack--nowrap-[ whenRegular | whenNarrow ]
  // ├─ &.Stack--showDividers-[ whenRegular | whenNarrow ]
  // │
  // ├─ .Stack-divider

  --Stack-gap: var(--primer-stack-gap-normal, 16px);
  --Stack-gap-whenNarrow: var(--Stack-gap);
  --Stack-divider-color: var(--color-border-default);

  display: flex;
  flex-flow: column;
  flex-wrap: nowrap;
  align-items: stretch;
  gap: var(--Stack-gap);
  // min-block-size: fit-content;
  // min-inline-size: fit-content;

  @media ($viewport-narrow) {
    gap: var(--Stack-gap-whenNarrow);
  }
}

/* Direction */

@media ($viewport-regular) {
  .Stack--dir-inline-whenRegular {
    flex-flow: row;
  }

  .Stack--dir-block-whenRegular {
    flex-flow: column;
  }
}

@media ($viewport-narrow) {
  .Stack--dir-inline-whenNarrow {
    flex-flow: row;
  }

  .Stack--dir-block-whenNarrow {
    flex-flow: column;
  }
}

/* Gap */

@media ($viewport-regular) {
  .Stack--gap-none-whenRegular {
    --Stack-gap: 0;
  }
  
  .Stack--gap-condensed-whenRegular {
    --Stack-gap: var(--primer-stack-gap-condensed, 8px);
  }
  
  .Stack--gap-normal-whenRegular {
    --Stack-gap: var(--primer-stack-gap-normal, 16px);
  }

  .Stack--gap-spacious-whenRegular {
    --Stack-gap: var(--primer-stack-gap-spacious, 24px);
  }
}

@media ($viewport-narrow) {
  .Stack--gap-none-whenNarrow {
    --Stack-gap-whenNarrow: 0;
  }

  .Stack--gap-condensed-whenNarrow {
    --Stack-gap-whenNarrow: var(--primer-stack-gap-condensed, 8px);
  }

  .Stack--gap-normal-whenNarrow {
    --Stack-gap-whenNarrow: var(--primer-stack-gap-normal, 16px);
  }

  // There's no .Stack--gap-spacious-whenNarrow
  // Narrow viewports render `spacious` gap as `normal`
}

/* Align */

@media ($viewport-regular) {
  .Stack--align-start-whenRegular {
    align-items: flex-start;
  }

  .Stack--align-center-whenRegular {
    align-items: center;
  }

  .Stack--align-end-whenRegular {
    align-items: flex-end;
  }

  .Stack--align-baseline-whenRegular {
    align-items: baseline;
  }
}

@media ($viewport-narrow) {
  .Stack--align-start-whenNarrow {
    align-items: flex-start;
  }

  .Stack--align-center-whenNarrow {
    align-items: center;
  }

  .Stack--align-end-whenNarrow {
    align-items: flex-end;
  }
  .Stack--align-baseline-whenNarrow {
    align-items: baseline;
  }
}

/* AlignWrap */

@media ($viewport-regular) {
  .Stack--alignWrap-start-whenRegular {
    align-content: flex-start;
  }

  .Stack--alignWrap-center-whenRegular {
    align-content: center;
  }

  .Stack--alignWrap-end-whenRegular {
    align-content: flex-end;
  }
  .Stack--alignWrap-distribute-whenRegular {
    align-content: space-between;
  }
  .Stack--alignWrap-distributeEvenly-whenRegular {
    align-content: space-evenly;
  }
}

@media ($viewport-narrow) {
  .Stack--alignWrap-start-whenNarrow {
    align-content: flex-start;
  }
  
  .Stack--alignWrap-center-whenNarrow {
    align-content: center;
  }
  
  .Stack--alignWrap-end-whenNarrow {
    align-content: flex-end;
  }
  .Stack--alignWrap-distribute-whenNarrow {
    align-content: space-between;
  }
  .Stack--alignWrap-distributeEvenly-whenNarrow {
    align-content: space-evenly;
  }
}

/* Spread */

@media ($viewport-regular) {
  .Stack--spread-start-whenRegular {
    justify-content: flex-start;
  }
  .Stack--spread-center-whenRegular {
    justify-content: center;
  }
  .Stack--spread-end-whenRegular {
    justify-content: flex-end;
  }
  .Stack--spread-distribute-whenRegular {
    justify-content: space-between;
  }
  .Stack--spread-distributeEvenly-whenRegular {
    justify-content: space-evenly;
  }
}

@media ($viewport-narrow) {
  .Stack--spread-start-whenNarrow {
    justify-content: flex-start;
  }
  .Stack--spread-center-whenNarrow {
    justify-content: center;
  }
  .Stack--spread-end-whenNarrow {
    justify-content: flex-end;
  }
  .Stack--spread-distribute-whenNarrow {
    justify-content: space-between;
  }
  .Stack--spread-distributeEvenly-whenNarrow {
    justify-content: space-evenly;
  }
}

/* Wrap */

@media ($viewport-regular) {
  .Stack--wrap-whenRegular {
    flex-wrap: wrap;
  }

  .Stack--nowrap-whenRegular {
    flex-wrap: nowrap;
  }
}

@media ($viewport-narrow) {
  .Stack--wrap-whenNarrow {
    flex-wrap: wrap;
  }

  .Stack--nowrap-whenNarrow {
    flex-wrap: nowrap;
  }
}

/* Divider */

@media ($viewport-regular) {
  .Stack--showDividers-whenRegular .Stack-divider {
    display: block;
  }
}
@media ($viewport-narrow) {
  .Stack--showDividers-whenNarrow .Stack-divider {
    display: block;
  }
}

.Stack-divider {
  margin: 0;
  padding: 0;
  border: none;
  display: none;
  align-self: stretch;
}

@media ($viewport-regular) {
  .Stack--dir-block-whenRegular .Stack-divider {
    border-block-end: var(--primer-borderWidth-thin, 1px) solid var(--Stack-divider-color);
    inline-size: auto;
    block-size: 0;
  }

  .Stack--dir-inline-whenRegular .Stack-divider {
    border-inline-end: var(--primer-borderWidth-thin, 1px) solid var(--Stack-divider-color);
    inline-size: 0;
    block-size: auto;
  }
}

@media ($viewport-narrow) {
  .Stack--dir-block-whenNarrow .Stack-divider {
    border-block-end: var(--primer-borderWidth-thin, 1px) solid var(--Stack-divider-color);
    inline-size: auto;
    block-size: 0;
  }
  .Stack--dir-inline-whenNarrow .Stack-divider {
    border-inline-end: var(--primer-borderWidth-thin, 1px) solid var(--Stack-divider-color);
    inline-size: 0;
    block-size: auto;
  }
}